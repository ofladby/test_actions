name: Lambda build and publish
description: Automatically build and publish Lambdas for DEV and PROD stacks. Deploying to actually run and be used in the stacks still requires spacelift/pulumi/aws deployment as well.

env:
    DEV_AWS_PROFILE: Brain-DEV
    DEV_AWS_REGION : "eu-west-1"
    DEV_AWS_ROLE_TO_ASSUME: 

    PROD_AWS_PROFILE: Brain-PROD
    PROD_AWS_REGION : "eu-west-1"
    PROD_AWS_ROLE_TO_ASSUME: 

on:
  push:
    branches:
      - dev
      - prod
    paths-ignore:
      - .VERSION

jobs:
  changes_dev:
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'dev' }}
    # Required permissions
    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout and git push
    outputs:
      # Expose matched filters as job 'folders' output variable
      folders: ${{ steps.filter.outputs.changes_dev }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          ref: dev

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            folder1: testA
            folder2: testB

  Build_for_DEV_stack:
    needs: changes_dev
    strategy:
      matrix:
        # Parse JSON array containing names of all filters matching any of changed files
        # e.g. ['package1', 'package2'] if both package folders contains changes
        folder: ${{ fromJSON(needs.changes_dev.outputs.folders) }}
    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: write    # This is required for actions/checkout and git push
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'dev' }}
    timeout-minutes: 10
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          ref: dev
    
      - name: Print changes
        shell: bash
        run: echo ${{ matrix.folder }}

      - name: Setup build environment
        uses: './.github/actions/build_setup'
        with:
          branch: "dev"
          dev-aws-profile-name: ${{ env.DEV_AWS_PROFILE }}
          dev-aws-role-to-assume: ${{ env.DEV_AWS_ROLE_TO_ASSUME }}
          dev-aws-region: ${{ env.DEV_AWS_REGION }}

      - name: Make lambdas
        shell: bash
        run: |
          AWS_PROFILE_BRAIN_DEV=${{ env.DEV_AWS_PROFILE }} make all
    
      - name: Update the .VERSION file
        shell: bash
        run: |
          AWS_PROFILE_BRAIN_DEV=${{ env.DEV_AWS_PROFILE }} make update_version

  changes_prod:
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'prod' }}
    # Required permissions
    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout and git push
    outputs:
      # Expose matched filters as job 'folders' output variable
      folders: ${{ steps.filter.outputs.changes_prod }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          ref: prod

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            folder1: testA
            folder2: testB

  Push_to_PROD_stack:
    needs: changes_prod
    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'prod' }}
    timeout-minutes: 10
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          ref: prod

      - name: Setup build environment
        uses: './.github/actions/build_setup'
        with:
          branch: "prod"
          dev-aws-profile-name: ${{ env.DEV_AWS_PROFILE }}
          dev-aws-role-to-assume: ${{ env.DEV_AWS_ROLE_TO_ASSUME }}
          dev-aws-region: ${{ env.DEV_AWS_REGION }}
          prod-aws-profile-name: ${{ env.PROD_AWS_PROFILE }}
          prod-aws-role-to-assume: ${{ env.PROD_AWS_ROLE_TO_ASSUME }}
          prod-aws-region: ${{ env.PROD_AWS_REGION }}

      - name: Publish lambdas from DEV to PROD stack
        shell: bash
        run: |
          AWS_PROFILE_BRAIN_DEV=${{ env.DEV_AWS_PROFILE }} AWS_PROFILE_BRAIN_PROD=${{ env.PROD_AWS_PROFILE }} make push_all_to_prod